<?php namespace Xls2modx\Console\Command;
/**
 *
 */


use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Yaml\Parser;

class ExportCommand extends Command
{
    public $modx;
    public $resource_cols;
    public $tvname_to_id = array();

    protected function configure()
    {
        $this
            ->setName('export')
            ->setDescription('Export MODX page resources to an .xls file')
            ->addArgument('target', InputArgument::REQUIRED, 'Path to Excel file.')
            ->addArgument('mapfile', InputArgument::OPTIONAL, 'Yaml file containing column mappings (generated via the map:export command)')
            ->addOption(
                'where',
                'w',
                InputOption::VALUE_REQUIRED,
                "JSON condition for getCollection",
                '{}'
            )
            ->addOption(
                'limit',
                'l',
                InputOption::VALUE_REQUIRED,
                "Limit rows returned",
                false
            )
            ->addOption(
                'offset',
                '',
                InputOption::VALUE_REQUIRED,
                "Offset rows returned (use with --limit)",
                0
            )
            ->addOption(
                'overwrite',
                'o',
                InputOption::VALUE_NONE,
                "Overwrite target file?"
            )
            //    ->setHelp(file_get_contents(dirname(dirname(dirname(dirname(__FILE__)))) . '/docs/export.txt'))
        ;

    }

    /**
     * See https://github.com/PHPOffice/PHPExcel/blob/develop/Documentation/markdown/Overview/10-Reading-and-Writing.md
     *
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @return int|null|void
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->modx = get_modx();
        $this->modx->initialize('mgr');
        $this->resource_cols = $this->modx->getFields('modResource');

        $target = $input->getArgument('target');
        $mapfile = $input->getArgument('mapfile');
        $where = $input->getOption('where');
        $overwrite = $input->getOption('overwrite');
        $limit = $input->getOption('limit');
        $offset = $input->getOption('offset');

        if (file_exists($target) && !$overwrite)
        {
            $output->writeln('<error>Destination file exists: '.$target.'</error>');
            $output->writeln('<error>Will not overwrite unless forced (--overwrite)</error>');
            exit;
            //throw new \Exception('File does not exist: '. $source);
        }
        $map = array(
            'modx2xls'=>array(),
            'Hardcoded-Values'=>array()
        );
        if ($mapfile)
        {
            $output->writeln('Exporting MODX data using mappings contained in '.$mapfile);
        }
        else
        {
            $mapfile = dirname(dirname(dirname(__FILE__))).'/export.yml';
            $output->writeln('Exporting MODX data using default mappings.');
        }

        if (!file_exists($mapfile))
        {
            $output->writeln('<error>File does not exist: '. $mapfile.'</error>');
            exit;
            //throw new \Exception('File does not exist: '. $source);
        }

        $yaml = new Parser();
        $map = $yaml->parse(file_get_contents($mapfile));


        $headers = $map['modx2xls']; //, array_keys($map['Hardcoded-
        $hard_coded = array();

        if ($map['Hardcoded-Values'])
        {
            $hard_coded = $map['Hardcoded-Values'];
            $headers = array_merge($headers, $map['Hardcoded-Values']);
        }

        $where = json_decode($where,true);
        // TODO: verify mappings
        $query = $this->modx->newQuery('modResource');
        $query->where($where);
        if ($limit)
        {
            $query->limit($limit, $offset);
        }

        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->getProperties()
            ->setCreator("Craftsman Coding: xls2modx")
            ->setLastModifiedBy("MODX export")
            ->setTitle("MODX Export: ".date('Y-m-d H:i:s'))
            ->setSubject("Contents of MODX site ". $this->modx->getOption('site_name'))
            ->setCompany('Craftsman Coding, LLC')
            ->setDescription("Document generated by the xls2modx command line tool (https://craftsmancoding.com/)")
            ->setKeywords("modx xls export import craftsmancoding")
            ->setCategory("Export");

        // Write Header Row
        $objPHPExcel->setActiveSheetIndex(0);
        $W = $objPHPExcel->getActiveSheet();
        $col = 'A';
        foreach ($headers as $k => $v)
        {
            $W->setCellValue($col.'1', $v);
            $headers[$k] = $col; // set the column
            $col++; // this trick works: Z++ --> AA, AB, etc.
        }

        // Write Rows
        $cnt = $this->modx->getCount('modResource', $where);
        if (!$cnt)
        {
            $output->writeln('<error>No pages matched your filters. (--where)</error>');
            exit;
        }
        $output->writeln('Beginning export of '.$cnt.' pages @ '.date('Y-m-d H:is'));

        $Pages = $this->modx->getIterator('modResource', $query);
        $row = 2;
        foreach ($Pages as $P)
        {
            $output->writeln( ($row - 1).'. '.$P->get('pagetitle').' ('.$P->get('id').')' );
            foreach($headers as $field => $col)
            {
                if (isset($hard_coded[$field]))
                {
                    $v = $hard_coded[$field];
                }
                elseif (isset($this->resource_cols[$field]))
                {
                    $v = $P->get($field);
                }
                else
                {
                    $v = $P->getTVValue($field);
                }

                $W->setCellValue($col.$row, $v);
            }
            $row++;
        }

        $objWriter = new \PHPExcel_Writer_Excel2007($objPHPExcel);
        $objWriter->setPreCalculateFormulas(false);
        $objWriter->save($target);

        $output->writeln('Export complete @ '.date('Y-m-d H:i:s'));
        $output->writeln("Peak memory usage: " . (memory_get_peak_usage(true) / 1024 / 1024) . " MB");
    }


}
/*EOF*/